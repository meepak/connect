/* eslint-disable react/prop-types */
/* eslint-disable react/no-array-index-key */
import React, { useEffect } from 'react'
import Svg, { Defs, G, Path } from 'react-native-svg'
import Animated, {
  Easing,
  useAnimatedStyle,
  useSharedValue,
  withRepeat,
  withTiming,
  runOnJS,
} from 'react-native-reanimated'

const AnimatedPath = Animated.createAnimatedComponent(Path)

const Ap = (props) => {
  const {
    index, path, onFinished, repeat,
  } = props

  const animatedLength = useSharedValue(0)

  const totalLength = path.length

  const animatedStyle = useAnimatedStyle(() => ({
    strokeDashoffset: animatedLength.value,
    strokeDasharray: [animatedLength.value, animatedLength.value / 10],
  }))

  useEffect(() => {
    animatedLength.value = withRepeat(
      withTiming(
        totalLength,
        {
          duration: totalLength * 1,
          easing: Easing.linear,
        },
        (finished) => {
          if (finished) {
            runOnJS(onFinished)(true, index)
          }
        },
      ),
      repeat ?? -1, false,
    )
  }, [])

  return (
    <AnimatedPath
      d={path}
      fill="transparent"
      stroke="yellow"
      strokeWidth={2}
      style={animatedStyle}
    />
  )
}

const HandwrittenAnimation = () => {
  const letterPaths = [
    'M441.788 288.146c7.753 3.19 27.494-16.15 15.362-17.005-1.825 8.127-18.157 17.864-21.41 6.552 13.552 2.95 31.221-22.027 10.304-21.131-11.574 4.038-23.987 25.955-7.243 31.23l2.987.354z',
    'M441.788 288.146c7.753 3.19 27.494-16.15 15.362-17.005-1.825 8.127-18.157 17.864-21.41 6.552 13.552 2.95 31.221-22.027 10.304-21.131-11.574 4.038-23.987 25.955-7.243 31.23l2.987.354zm7.317-26.73c7.828 5.78-20.632 16.214-7.14 4.325 1.868-2.007 4.198-4.28 7.14-4.326zm-14.336 9.109c3.914 9.153-14.16 23.22-23.114 15.768-6.336-8.655 1.447-20.555-.705-27.043 8.684-.984 8.75-25.754 20.496-18.35.208 7.567-16.757 21-1.402 17.757 10.114 10.118-16.885-.385-14.259 11.625-7.3 12.654 7.266 16.981 13.123 5.6 1.902-1.787 2.198-6.537 5.861-5.357zm-52.042 18.069c7.661-2.651 9.61-4.953 16.128-.747 7.734 2.807 22.994-19.365 11.2-16.053-.457 7.701-17.85 15.738-9.26 4.106 2.006-6.36 7.341-14.221-2.015-17.957-12.66-.46-27.851 16.072-21.728 28.187 1.412 1.657 3.555 2.487 5.675 2.464zm14.41-25.461c7.83 4.45-5.694 14.097-10.502 18.879-16.086 4.92 3.17-20.532 10.502-18.88zm-22.922-11.574c11.538-6.926-10.033-7.422 0 0zm-7.616 35.243c8.129 3.107 21.677-19.77 10.08-15.605-2.592 14.652-21.041 10.268-9.483-2.838 5.807-3.453 5.411-16.788-1.3-7.981-5.1 7.092-14.822 25.01.703 26.424zm-21.952 2.837c8.04 2.087 26.052-14.762 16.277-18.965-1.877 9.77-22.84 21.754-20.533 4.181 1.033-10.096 17.312-18.022 9.93-4.778 13.407 5.15 6.975-22.22-5.035-11.42-9.516 6.565-17.761 28.3-.64 30.982zm-32.331-1.866c8.908-5.216 20.963-6.963 26.805-15.606-3.222-7.409-13.158 9.42-7.56-3.938 2.354-15.932-15.277-11.73-20.07-2.313-5.502 5.346-10.784 20.397.825 21.857zm12.021-25.835c7.562 6.543-5.726 17.508-4.946 4.237.808-2.044 2.726-3.88 4.946-4.237zm-10.005 8.736c5.33 5.684 7.504 11.077-2.987 11.499-1.828-3.915.78-8.332 2.987-11.5zm-19.563 18.219c18.201-1.858 7.176-23.934 5.302-34.272-7.098 1.372-8.355 16.585-17.342 20.85 3.644 13.562 17.066-20.9 16.82-1.81 3.82 11.573-7.807 10.15-13.366 6.57-4.96 4.341 4.622 9.36 8.586 8.662zm-22.922 0c18.2-1.858 7.175-23.934 5.301-34.272-7.098 1.372-8.355 16.585-17.341 20.85 3.643 13.562 17.066-20.9 16.819-1.81 3.821 11.573-7.807 10.15-13.366 6.57-4.96 4.341 4.622 9.36 8.587 8.662zm-10.155-19.19c10.01 1.357-2.9 19.469-10.677 17.92-13.994-2.18-1.095-30.568-19.206-20.229-6.717 5.368-7.163 24.635-15.813 22.245-3.183-9.42 19.215-24.954 4.704-26.283-2.8-9.41 13.098 1.02 13.29-9.037 7.228-7.565 16.09-27.529 27.049-23.387-5.934 15.188-12.794 30.994-12.357 47.675 3.285 11.306 11.216-5.152 13.01-8.904zm-25.461-9.184c13.423 6.64 10.15-12.18 15.307-19.861-5.718 6.12-10.688 12.888-15.307 19.861zm-67.797 26.806c8.1 1.644 13.984-17.099 14.485-3.062 6.905 11.087 27.797-12.465 15.81-13.122-1.52 7.228-15.65 16.232-11.031 2.744 2.98-14.592 12.79-26.67 16.912-40.806-8.82-7.067-11.869 16.323-16.405 22.275-10.365-.524-26.502 9.267-27.387 23.533-.477 4.353 3.189 8.486 7.616 8.438zm14.261-25.91c3.72 4.398-9.542 23.598-16.445 18.947.243-8.189 8.047-18.019 16.445-18.947zm-53.685 24.342c7.369-4.191 12.463-22.774 22.55-18.667-4.042 7.483-5.328 23.643 7.933 16.828 8.751-.856 12.434-23.58 3.472-11.657-3.004 8.638-13.865 10.107-6.944-.598 5.18-14.813-16.092-12.945-20.067-2.482 3.834-11.6-7.771-7.027-5.974 1.94.414 4.2-7.174 12.79-.97 14.636zm-.97-34.198c11.538-6.926-10.033-7.422 0 0zm-7.617 35.243c8.13 3.107 21.678-19.77 10.08-15.605-2.591 14.652-21.04 10.268-9.482-2.838 5.807-3.453 5.41-16.788-1.301-7.981-5.1 7.092-14.822 25.01.703 26.424zm11.275-57.27c3.452 13.262-25.852-1.223-23.823 14.979-4.441 8.023-6.052 14.655 4.988 10.912 13.07 1.33-5.847 8.791-11.33 6.216-5.627 8.854-2.946 22.86-8.288 29.792-11.723-6.274 12.26-33.642-5.152-28.448-9.011-8.614 15.565-2.361 12.26-13.716 3.933-7.569 8.594-19.186-4.537-12.128-4.903 3.104 1.056 21.722-7.311 10.603-5.32-14.65 12.856-20.652 24.083-16.987 6.473 1.256 12.937-1.15 19.11-1.223z',

  ]

  const currentPath = useSharedValue(0)

  const Finished = (finished) => {
    if (finished) {
      currentPath.value = currentPath.value === letterPaths.length - 1 ? 0 : currentPath.value + 1
      // console.log('Finished ', currentPath.value, index)
    }
  }

  return (
    <Svg width="70%" height="70%" viewBox="0 0 103.131 15.973">
      <Defs>
        <Path id="a" d="M81.747 217.387h383.429v106.414H81.747z" />
      </Defs>
      <G
        aria-label="Find Associate"
        style={{
          fontSize: '74.6667px',
          lineHeight: 1.25,
          whiteSpace: 'pre',
          shapeInside: 'url(#a)',
        }}
        transform="matrix(.27412 0 0 .25485 -23.422 -58.296)"
      >
        <Ap index={currentPath.value} path={letterPaths[1]} onFinished={Finished} />
      </G>
    </Svg>
  )
}

export default HandwrittenAnimation

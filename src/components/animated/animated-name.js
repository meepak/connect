import React, { useEffect, useState } from 'react';
import Svg, { Path } from 'react-native-svg';
import Animated, {
  useSharedValue,
  useAnimatedStyle,
  withTiming,
  runOnJS,
} from 'react-native-reanimated';

const AnimatedName = () => {
  const namePaths = [
    "M 34.41754,3.6642896 C 28.477124,3.7994326 22.502457,3.365662 16.584457,3.9408718 9.0494137,5.3642282 3.8031044,12.615831 2.9398964,19.958607 2.1928102,25.964617 2.6672094,32.030968 2.5425397,38.06743 c 0,10.969785 0,21.93957 0,32.909355 M 34.41754,35.53929 c -10.491934,0 -20.983868,0 -31.4758029,0",
    "m 43.964415,25.367415 v 45.60937 m 0.05695,-54.772541 c 0.42742,-0.0686 -1.102757,0.176984 0,0 z",
    "m 60.146756,70.972126 c 0.01828,-9.808199 -0.03689,-19.617628 0.0282,-29.425044 0.209002,-6.648096 4.484748,-12.966248 10.536987,-15.684082 4.917591,-1.908957 10.63207,-1.816869 15.501892,0.205628 6.631291,2.900566 10.714877,10.211091 10.401673,17.350959 0,9.18418 0,18.368359 0,27.552539",
    "m 146.10567,26.634779 c -6.59923,-6.4727 -17.68659,-7.438471 -25.30499,-2.210449 -7.47761,4.860239 -11.90249,13.91682 -10.97772,22.809447 0.88976,9.092765 7.05199,17.967998 16.10706,20.438262 8.08392,2.331585 17.21248,-0.608994 22.62394,-7.013346 4.80274,-4.969268 5.86731,-12.179107 5.61421,-18.815634 0,-13.881927 0,-27.763853 0,-41.64578021",
    "m 190.13235,70.972736 c 0.0255,-15.743672 -0.0512,-31.489161 0.0388,-47.231684 0.42689,-7.66781 4.27925,-15.7851857 11.61639,-18.9986575 6.30626,-2.7149526 13.62041,-2.8500325 20.18065,-0.9908638 7.88292,2.2431756 13.28424,9.8309473 14.26259,17.7666203 0.49873,5.232373 0.1625,10.504931 0.26092,15.755829 0,11.232919 0,22.465837 0,33.698756 m -0.1682,-32.776973 c -12.77155,-0.0787 -25.54429,-0.01488 -38.31615,-0.03552",
    "m 280.56743,23.74811 h -20.85938 c -3.25,0 -5.9375,0.96875 -8.0625,2.90625 -2.21875,2.03125 -3.32812,4.65625 -3.32812,7.875 0,4.71875 2.29687,8.078125 6.89062,10.078125 7.59375,2.375 13.39063,3.96875 17.39063,4.78125 5.03125,1.562497 7.49995,6.950767 7.40625,11.076174 -0.0937,5.250407 -3.42753,7.8899 -10.07813,7.9188 l -21.42187,0.0931",
    "m 322.79014,23.74811 h -20.85938 c -3.25,0 -5.9375,0.96875 -8.0625,2.90625 -2.21875,2.03125 -3.32812,4.65625 -3.32812,7.875 0,4.71875 2.29687,8.078125 6.89062,10.078125 7.59375,2.375 13.39063,3.96875 17.39063,4.78125 5.03125,1.562497 7.49995,6.950767 7.40625,11.076174 -0.0937,5.250407 -3.42753,7.8899 -10.07813,7.9188 l -21.42187,0.0931",
    "m 354.83941,21.037306 c 7.93952,-0.245821 15.65752,4.266944 19.62297,11.103277 5.48672,9.061848 4.07991,21.57162 -3.19011,29.258523 -4.59719,5.202091 -11.77691,7.60787 -18.6112,6.978359 -6.56628,-0.410836 -12.97646,-3.868814 -16.42616,-9.55889 -4.65362,-6.862579 -6.21981,-16.154374 -2.53267,-23.794959 3.34036,-7.626579 10.82327,-13.701223 19.34761,-13.930313 0.59571,-0.03796 1.19265,-0.056 1.78956,-0.056 z",
    "m 419.35504,21.840674 c -7.38891,-0.640228 -15.46902,0.02165 -21.53269,4.725449 -5.72477,4.315114 -8.80654,11.561867 -8.51419,18.665176 0.055,6.240107 1.75093,13.053199 6.81546,17.135554 5.91799,4.610864 13.65053,6.564179 21.07517,6.020741",
    "m 430.23737,25.367414 v 45.609371 m 0.057,-54.772542 c 0.42741,-0.0686 -1.10276,0.176984 0,0 z",
    "m 480.08941,63.004674 c -4.85373,3.949791 -11.22802,6.213414 -17.50268,5.247803 -6.23946,-0.576544 -12.00463,-4.324213 -15.07989,-9.781261 -5.27906,-8.678081 -5.37346,-20.681042 0.91063,-28.877014 4.62116,-5.682615 12.09913,-9.198706 19.47047,-8.230636 6.123,0.423227 12.07075,3.545845 15.50337,8.700256 3.47085,4.699073 4.85226,10.615913 4.57305,16.389678 0,7.079558 0,14.159116 0,21.238674",
    "m 501.96551,25.836363 c 6.53088,0.1559 13.06177,0.3118 19.59265,0.4677 -6.53088,-0.1559 -13.06177,-0.3118 -19.59265,-0.4677 z m -0.28235,-15.4698 c 0.02,15.301317 -0.0403,30.603987 0.0305,45.904449 0.0802,4.085409 1.96073,8.277847 5.60943,10.357496 3.25677,2.160675 7.24949,1.799684 10.96316,1.816175 1.09064,0 2.18128,0 3.27192,0",
    "m 535.35504,54.344994 c 10.89062,-7.359375 21.78125,-14.71875 32.67187,-22.078125 -6.50002,-11.020675 -22.69312,-14.424827 -33.22421,-7.265533 -8.52746,5.639854 -13.20266,17.227629 -9.59546,27.033184 2.85316,8.948237 11.34679,15.832 20.78734,16.338534 8.77086,0.823287 18.1272,-3.372826 22.41044,-11.260787 1.99654,-3.454845 3.02595,-7.416977 3.18439,-11.392273"
  ]

  const color = { primary: 'red', bgColor: 'white', secondary: 'blue', tertiary: "green"}

  

  const strokeWidth = 4
  
  const AnimatedPath = Animated.createAnimatedComponent(Path)

  const animatedLength = useSharedValue(100)
  const totalLength = useSharedValue(1000)
  const timing = 1500

  const currentIndex = useSharedValue(-1)
  const currentPath = useSharedValue(namePaths[currentIndex.value])

  const drawnPaths = []


  const nextLetter = () => {
    let index = currentIndex.value < namePaths.length - 1 && currentIndex.value >= 0 ? currentIndex.value + 1 : 0;
    currentIndex.value = index;
    let length = 1000;

    if (index === 1 || index === 9) {
      length = 800;
    } else if (index === 4 || index === 10) {
      length = 1100;
    }
    animatedLength.value = length

    totalLength.value = length;
    animatedLength.value = withTiming(0, { duration: timing }, (finished) => {
      if (finished) {
        drawnPaths.push(currentPath.value)
        runOnJS(nextLetter)()
      }
    })
    currentPath.value = namePaths[index]; // set new path
    // console.log('next index is ', currentIndex.value);
  }

  useEffect(() => {
    nextLetter(); // initial animation
  }, []); // empty dependency array to trigger once

  const animatedStyle = useAnimatedStyle(() => ({
    strokeDashoffset: animatedLength.value,
    strokeDasharray: [totalLength.value, animatedLength.value],
  }), [animatedLength])

  useEffect(() => {
    console.log("current index is", currentIndex.value)
console.log(drawnPaths.length)
  }, [drawnPaths.length]); // empty dependency array to trigger once

  

  return (
    <><Svg viewBox="0 0 574.09 70.977">
      {drawnPaths.map((path) => (
        <Path
          d={path}
          fill="none"
          stroke={color.primary}
          strokeWidth={strokeWidth} />
      ))}
        <AnimatedPath
          d={currentPath}
          fill="none"
          stroke={color.primary}
          strokeWidth={strokeWidth}
          style={animatedStyle} />
      </Svg></>

  )
}

export default AnimatedName
